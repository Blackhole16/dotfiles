#!/bin/bash

# Set up an arch-linux system with encryption using an arch-boostrap image.
# The linux and swap partitions will be encrypted with a random key.
# That random key will be stored on an external drive like an SD card or thumb drive.
# That external drive will be encrypted with a password.

# Even though the swap partition is encrypted with a static key, hibernation
# is not (yet) supported with these instructions, but support can be added later on.

# partition variables
BOOTPARTITION=/dev/device1
SWAPPARTITION=/dev/device2
SYSTEMPARTITION=/dev/device3
SWAP=/dev/mapper/swap
SYSTEM=/dev/mapper/system

loadkeys de-latin1
setfont lat9w-16

# setup partitions
# If there is a windows instance installed on an msdos partition table,
# change to gpt and recreate the windows partition with the exact same sections.
fdisk /dev/device
    # GPT, needed for EFI
    g
    # boot (EFI)
    n
        1
        default
        +100M
    t
        1
    # SWAP
    n
        2
        default
        +32G
    t
        2
        19
    # Linux System
    n
        3
        default
        +256G
    w

# crypto system
# If no keyfile is wanted on an external drive, leave out -d keyfile.
cryptsetup -vd keyfile_system luksFormat $SYSTEMPARTITION
cryptsetup open -d keyfile_system $SYSTEMPARTITION system
# crypto swap
# If swap should not be encrypted, leave out this step.
# If no keyfile is wanted on an external drive, leave out -d keyfile. UNTESTED
cryptsetup -vd keyfile_swap luksFormat $SWAPPARTITION
cryptsetup open -d keyfile_swap $SWAPPARTITION swap


# format
mkfs.ext4 $SYSTEM
mkfs.fat -F32 $BOOTPARTITION
# swap
# If swap was set up without encryption, use $SWAPPARTITION instead of $SWAP.
mkswap $SWAP
swapon $SWAP

# mount everything
mount $SYSTEM /mnt
mkdir /mnt/boot
mount $BOOTPARTITION /mnt/boot


# pacstrap
# For a setup with wayland and sway use this instead: UNTESTED
# pacstrap -i /mnt base base-devel git net-tools networkmanager wayland sway gnome-terminal cmake

# For a setup with gnome and wayland (wayland is default for gnome).
# Using gnome you need to have `exec gnome-session` in you .xinitrc.
# Additionally if you want to use gdm, run `systemctl enable gdm.service` in the new system
# pacstrap -i /mnt base base-devel zsh git net-tools networkmanager network-manager-applet gvim cmake gnome gnome-extra

# For xorg and i3:
pacstrap -i /mnt base base-devel zsh git net-tools networkmanager network-manager-applet xorg-xserver xorg-xinit xorg-apps rxvt-unicode i3 dmenu gvim cmake


genfstab -U /mnt > /mnt/etc/fstab
# make sure everything is correct
cat /mnt/etc/fstab

arch-chroot /mnt /bin/zsh

# locale
nano /etc/locale.gen # uncomment en_US.UTF-8 UTF-8 or the language of your choice
locale-gen
echo LANG=en_US.UTF-8 > /etc/locale.conf # use the uncommented language here
echo -e "KEYMAP=de-latin1\nFONT=lat9w-16" > /etc/vconsole.conf
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
hwclock --systohc --utc

# hostname
echo myhostname > /etc/hostname
nano /etc/hosts # add 'myhostname' to end of each line

# setup boot
bootctl install
bootctl update

# create user
useradd NAME -m -g users -G wheel -s /bin/zsh 
nano /etc/sudoers # uncomment %wheel
# Using the group sudo may work as well (@main--), but I only had success with wheel.

# dotfiles 'n stuff
  # change user to created one
  # setup dotfiles
  # setup paranoid_link if an external drive is used to store the encryption keys
  # edit files for paranoid stuff

# generate bootimage and entries
mkinitcpio -p linux
cat <<_EOF_ > /boot/loader/entries/arch.conf
title       Arch Linux
linux       /vmlinuz-linux
initrd      /initramfs-linux.img
options     cryptdevice=$SYSTEMPARTITION:system root=$SYSTEM
_EOF_

# If multiple entries exist, timeout should be non-zero
cat <<_EOF_ > /boot/loader/loader.conf
default arch
timeout 0
_EOF_

# TODO
# If there is a dual-boot Windows, which doesn't show up automatically
cat <<_EOF_ > /boot/loader/entries/windows.conf
title Windows
_EOF_


# important packets
pacman -S python3
pacman -S python2
pacman -S arandr
pacman -S ttf-dejavu
pacman -S ttf-symbola
pacman -S wget
pacman -S openssh
pacman -S openvpn

# pikaur instead of aurman, because aurman became weird after a few updates
# aurman instead of pacaur, because pacaur is ded since pacman 5.1.0
# pacaur instead of yaourt, because it's secure™
# adapted from https://gist.github.com/Tadly/0e65d30f279a34c33e9b
mkdir -p /tmp/pikaur_install
pushd /tmp/pikaur_install
sudo pacman -S python expac python-requests git python-regex python-dateutil pyalpm python-feedparser --noconfirm --needed
curl -o PKGBUILD "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pikaur"
makepkg PKGBUILD --install --needed
popd
rm -rf /tmp/pikaur_install

# make aur builds faster
# add `MAKEFLAGS="-j$(nproc)"`
nano /etc/makepkg.conf

# setup neo-layout
aurman -S kbd-neo
localectl set-keymap --no-convert de neo
localectl set-x11-keymap --no-convert de thinkpad neo

# notification daemon
pacman -S dunst

# browser
aurman -S vivaldi
pacman -S firefox
pacman -S gst-libav

# useful others
aurman -S urxvt-font-size-git
pacman -S zathura zathura-pdf-mupdf
pacman -S feh
pacman -S imagemagick
pacman -S htop iotop
pacman -S unzip
pacman -S nmap
pacman -S mlocate
pacman -S gedit
pacman -S tree
pacman -S dosfstools
pacman -S ntfs-3g
pacman -S ncdu

# media
pacman -S mpd
pacman -S mpc
pacman -S mpv

# others
pacman -S ffmpeg
pacman -S mumble
pacman -S pulseaudio
pacman -S pavucontrol
aurman -S pulseaudio-ctl
pacman -S thunderbird

# xmpp
pacman -S gajim python-axolotl python-pillow
# Plugins: OMEMO, Url image preview

# mysql
pacman -S mariadb
sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
mysql_secure_installation
pacman -S dnsutils

# steam
# enable multilib in /etc/pacman.conf
pacman -Syu
aurman -S steam

# other fonts used for games/wine/vim
aurman -S ttf-tahoma
aurman -S ttf-ms-fonts
aurman -S ttf-dejavu-sans-mono-powerline-git

# java
pacman -S jdk8-openjdk
pacman -S openjdk8-src
pacman -S openjdk8-doc
aurman -S intellij-idea-ultimate-edition

# rust
pacman -S rustup

# maybe
pacman -S gparted
pacman -S gucharmap

# cups (not working ☹)
pacman -S avahi
pacman -S cups
sudo gpasswd -a `whoami` lp
sudo gpasswd -a `whoami` sys
# drivers, install required ones
pacman -S gutenprint # Canon, Epson, Lexmark, Sony, Olympus, PCL
pacman -S foomatic foomatic-db foomatic-db:engine, foomatic-db-ppd foomatic-filters
pacman -S hplip # HP
pacman -S splix # Samsung
pacman -S cups-pdf # Print to PDF
systemctl enable avahi-dnsconfd.service
systemctl enable org.cups.cupsd.service
systemctl enable cups-browsed.service
systemctl start avahi-dnsconfd.service
systemctl start org.cups.cupsd.service
systemctl start cups-browsed.service
